import {
  AuthType,
  SismoConnectResponse,
  ProvingScheme,
  SismoConnectResponseInterface,
} from "../src/common-types";

describe("SismoConnectResponse", () => {
  let response: SismoConnectResponse;
  let rawResponse: SismoConnectResponseInterface;

  beforeEach(() => {
    rawResponse = {
      appId: "0x1",
      signedMessage: "Message signed",
      proofs: [
        {
          auths: [
            {
              authType: AuthType.VAULT,
              userId: "0x1",
            },
          ],
          provingScheme: ProvingScheme.HYDRA_S3,
          proofData: "proof1",
          extraData: null,
        },
        {
          auths: [
            {
              authType: AuthType.TWITTER,
              userId: "1",
            },
          ],
          provingScheme: ProvingScheme.HYDRA_S3,
          proofData: "proof2",
          extraData: null,
        },
        {
          auths: [
            {
              authType: AuthType.TWITTER,
              userId: "2",
            },
          ],
          provingScheme: ProvingScheme.HYDRA_S3,
          proofData: "proof3",
          extraData: null,
        },
      ],
      version: "sismo-connect-v1",
    };
    response = new SismoConnectResponse(rawResponse);
  });

  it("should return the response as a json", () => {
    expect(response.toJson()).toEqual(rawResponse);
  });

  it("should return the response as a bytes", () => {
    expect(response.toBytes()).toEqual(
      "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000100000000000000000000000000000000b8e2054f8a912367e38a22ce773328ff000000000000000000000000000000007369736d6f2d636f6e6e6563742d76310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000122000000000000000000000000000000000000000000000000000000000000000eMessage signed000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000004a200000000000000000000000000000000000000000000000000000000000008e400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001a068796472612d73332e310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ca0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006proof10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001a068796472612d73332e310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ca0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006proof20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001a068796472612d73332e310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000024200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006proof300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    );
  });

  it("should return vaultId", () => {
    expect(response.getUserId(AuthType.VAULT)).toEqual("0x1");
  });

  it("should return twitter userIds", () => {
    expect(response.getUserIds(AuthType.TWITTER)).toEqual(["1", "2"]);
  });

  it("should return signed message", () => {
    expect(response.getSignedMessage()).toEqual("Message signed");
  });
});
