/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import { Listener, Provider } from '@ethersproject/providers'
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common'

export interface AvailableRootsRegistryInterface extends utils.Interface {
  contractName: 'AvailableRootsRegistry'
  functions: {
    '_roots(address,uint256)': FunctionFragment
    'initialize(address)': FunctionFragment
    'isRootAvailableForAttester(address,uint256)': FunctionFragment
    'isRootAvailableForMe(uint256)': FunctionFragment
    'owner()': FunctionFragment
    'registerRootForAll(uint256)': FunctionFragment
    'registerRootForAttester(address,uint256)': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'unregisterRootForAll(uint256)': FunctionFragment
    'unregisterRootForAttester(address,uint256)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: '_roots',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'initialize', values: [string]): string
  encodeFunctionData(
    functionFragment: 'isRootAvailableForAttester',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'isRootAvailableForMe',
    values: [BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'registerRootForAll',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'registerRootForAttester',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'unregisterRootForAll',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'unregisterRootForAttester',
    values: [string, BigNumberish]
  ): string

  decodeFunctionResult(functionFragment: '_roots', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'isRootAvailableForAttester',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'isRootAvailableForMe',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'registerRootForAll',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'registerRootForAttester',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'unregisterRootForAll',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'unregisterRootForAttester',
    data: BytesLike
  ): Result

  events: {
    'OwnershipTransferred(address,address)': EventFragment
    'RegisteredRootForAll(uint256)': EventFragment
    'RegisteredRootForAttester(address,uint256)': EventFragment
    'UnregisteredRootForAll(uint256)': EventFragment
    'UnregisteredRootForAttester(address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RegisteredRootForAll'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RegisteredRootForAttester'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UnregisteredRootForAll'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UnregisteredRootForAttester'): EventFragment
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>

export type RegisteredRootForAllEvent = TypedEvent<
  [BigNumber],
  { root: BigNumber }
>

export type RegisteredRootForAllEventFilter =
  TypedEventFilter<RegisteredRootForAllEvent>

export type RegisteredRootForAttesterEvent = TypedEvent<
  [string, BigNumber],
  { attester: string; root: BigNumber }
>

export type RegisteredRootForAttesterEventFilter =
  TypedEventFilter<RegisteredRootForAttesterEvent>

export type UnregisteredRootForAllEvent = TypedEvent<
  [BigNumber],
  { root: BigNumber }
>

export type UnregisteredRootForAllEventFilter =
  TypedEventFilter<UnregisteredRootForAllEvent>

export type UnregisteredRootForAttesterEvent = TypedEvent<
  [string, BigNumber],
  { attester: string; root: BigNumber }
>

export type UnregisteredRootForAttesterEventFilter =
  TypedEventFilter<UnregisteredRootForAttesterEvent>

export interface AvailableRootsRegistry extends BaseContract {
  contractName: 'AvailableRootsRegistry'
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: AvailableRootsRegistryInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    _roots(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    initialize(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    isRootAvailableForAttester(
      attester: string,
      root: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    isRootAvailableForMe(
      root: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    owner(overrides?: CallOverrides): Promise<[string]>

    registerRootForAll(
      root: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    registerRootForAttester(
      attester: string,
      root: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    unregisterRootForAll(
      root: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    unregisterRootForAttester(
      attester: string,
      root: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  _roots(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>

  initialize(
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  isRootAvailableForAttester(
    attester: string,
    root: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>

  isRootAvailableForMe(
    root: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>

  owner(overrides?: CallOverrides): Promise<string>

  registerRootForAll(
    root: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  registerRootForAttester(
    attester: string,
    root: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  unregisterRootForAll(
    root: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  unregisterRootForAttester(
    attester: string,
    root: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    _roots(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    initialize(owner: string, overrides?: CallOverrides): Promise<void>

    isRootAvailableForAttester(
      attester: string,
      root: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    isRootAvailableForMe(
      root: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    owner(overrides?: CallOverrides): Promise<string>

    registerRootForAll(
      root: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    registerRootForAttester(
      attester: string,
      root: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    unregisterRootForAll(
      root: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    unregisterRootForAttester(
      attester: string,
      root: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter

    'RegisteredRootForAll(uint256)'(
      root?: null
    ): RegisteredRootForAllEventFilter
    RegisteredRootForAll(root?: null): RegisteredRootForAllEventFilter

    'RegisteredRootForAttester(address,uint256)'(
      attester?: null,
      root?: null
    ): RegisteredRootForAttesterEventFilter
    RegisteredRootForAttester(
      attester?: null,
      root?: null
    ): RegisteredRootForAttesterEventFilter

    'UnregisteredRootForAll(uint256)'(
      root?: null
    ): UnregisteredRootForAllEventFilter
    UnregisteredRootForAll(root?: null): UnregisteredRootForAllEventFilter

    'UnregisteredRootForAttester(address,uint256)'(
      attester?: null,
      root?: null
    ): UnregisteredRootForAttesterEventFilter
    UnregisteredRootForAttester(
      attester?: null,
      root?: null
    ): UnregisteredRootForAttesterEventFilter
  }

  estimateGas: {
    _roots(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    initialize(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    isRootAvailableForAttester(
      attester: string,
      root: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isRootAvailableForMe(
      root: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    registerRootForAll(
      root: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    registerRootForAttester(
      attester: string,
      root: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    unregisterRootForAll(
      root: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    unregisterRootForAttester(
      attester: string,
      root: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    _roots(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    initialize(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    isRootAvailableForAttester(
      attester: string,
      root: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isRootAvailableForMe(
      root: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    registerRootForAll(
      root: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    registerRootForAttester(
      attester: string,
      root: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    unregisterRootForAll(
      root: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    unregisterRootForAttester(
      attester: string,
      root: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
